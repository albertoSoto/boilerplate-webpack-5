///*------------------------------------*\
//    #MIXINS
//\*------------------------------------*/

@mixin font-family($font-family) {

  @if ($font-family == "serif") {
    font-family: "Yrsa", serif;
  }

  @if ($font-family == "sans-serif") {
    font-family: "Open Sans", sans-serif;
  }

}

// Generate numbered font-weights from their aliases.
@mixin font-weight($font-weight) {

  @if ($font-weight == "regular") {
    font-weight: 400;
  }

  @if ($font-weight == "medium") {
    font-weight: 500;
  }

  @if ($font-weight == "semibold") {
    font-weight: 600;
  }

  @if ($font-weight == "bold") {
    font-weight: 700;
  }

  @if ($font-weight == "extrabold") {
    font-weight: 800;
  }

}

// Create all specified heading styles in one go.
@mixin headings($from: 1, $to: 6) {

  %base-heading {
    @content;
  }

  @if $from >= 1 and $to <= 6 {

    @for $i from $from through $to {

      h#{$i} {
        @extend %base-heading;
      }

    }

  }

}

@mixin size($width, $height) {
  width: $width;
  height: $height;
}

@mixin square($size) {
  @include size($size, $size);
}

@mixin gradient($color: #F5F5F5, $start: #EEEEEE, $stop: #FFFFFF) {
  background: $color;
  background: linear-gradient($stop, $start);
  filter: unquote("progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$stop}', endColorstr='#{$start}', GradientType=0)");
}

@mixin bw-gradient($color: #F5F5F5, $start: 0, $stop: 255) {
  background: $color;
  background: linear-gradient(rgb($stop, $stop, $stop), rgb($start, $start, $start));
  filter: unquote("progid:DXImageTransform.Microsoft.gradient(startColorstr='#{rgb($stop,$stop,$stop)}', endColorstr='#{rgb($start,$start,$start)}', GradientType=0)");
}

@mixin bordered($top-color: #EEEEEE, $right-color: #EEEEEE, $bottom-color: #EEEEEE, $left-color: #EEEEEE) {
  border-style: solid;
  border-width: 1px;
  border-color: $top-color $right-color $bottom-color $left-color;
}

@mixin transform($arguments...) {
   transform: $arguments;
 }

@mixin rotation($deg: 5deg) {
  @include transform(rotate($deg));
}

@mixin scale($ratio: 1.5) {
  @include transform(scale($ratio));
}

@mixin translate($x: 0, $y: 0) {
  @include transform(translate($x, $y));
}

@mixin transition($property: all, $duration: 0.2s, $ease: ease-out) {
  transition: $property $duration $ease;
}

@mixin transition-duration($duration: 0.2s) {
  transition-duration: $duration;
}

@mixin transition-delay($delay: 0.2s) {
  transition-delay: $delay;
}

@mixin box-shadow($arguments...) {
  box-shadow: $arguments;
}

@mixin inner-shadow($horizontal: 0, $vertical: 1px, $blur: 2px, $alpha: 0.4) {
  @include box-shadow(inset $horizontal $vertical $blur rgba(0, 0, 0, $alpha));
}

@mixin drop-shadow($x-axis: 0, $y-axis: 1px, $blur: 2px, $alpha: 0.1) {
  @include box-shadow($x-axis $y-axis $blur rgba(0, 0, 0, $alpha));
}

@mixin rounded($radius...) {
  border-radius: $radius;
}

@mixin border-radius($topright: 0, $bottomright: 0, $bottomleft: 0, $topleft: 0) {
  @include rounded($topleft $topright $bottomright $bottomleft);
  @include background-clip(padding-box);
}

@mixin transition($property: all, $duration: 0.2s, $ease: ease-out) {
  transition: $property $duration $ease;
}

@mixin background-clip($argument: padding-box) {
  background-clip: $argument;
}

@mixin columns($colwidth: 250px, $colcount: 0, $colgap: 50px, $columnRuleColor: #EEEEEE, $columnRuleStyle: solid, $columnRuleWidth: 1px) {
  column-width: $colwidth;
  column-count: $colcount;
  column-gap: $colgap;
  column-rule-color: $columnRuleColor;
  column-rule-style: $columnRuleStyle;
  column-rule-width: $columnRuleWidth;
}
